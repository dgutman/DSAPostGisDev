version: "3.9"
volumes:
  postgis-data-volume:
  mongodb-data-volume:
services:
  # annotation-browser:
  #   build:
  #     context: .
  #     dockerfile: ./annotationBrowser/Dockerfile
  #   depends_on:

  #     - redis
  #     - celery_worker
  #   command: /start
  #   volumes:
  #     - ./annotationBrowser:/app
  #   ports:
  #     - 8050:8050

  mongodb:
    image: mongo:latest
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: docker
      MONGO_INITDB_ROOT_PASSWORD: docker
    volumes:
      - mongodb-data-volume:/data/db
    ports:
      - 37017:27017 ## Comment if you do not want anything outside of docker compose to connect
    command: --maxConns 1000

    logging:
      options:
        max-size: "10M"
        max-file: "5"
  redis:
    image: redis:7
    ports:
      - 6379:6379
  celery_worker:
    build:
      context: .
      dockerfile: ./annotationBrowser/Dockerfile
    # image: celery_worker
    command: /start-celeryworker
    volumes:
      - ./annotationBrowser:/app
    env_file:
      - .env
    environment:
      - FLASK_APP=app
    depends_on:
      - redis
  celery_beat:
    build:
      context: .
      dockerfile: ./dockerServices/Dockerfile
    # image: flask_celery_example_celery_beat
    command: /start-celerybeat
    volumes:
      - ./dockerServices/:/app
    env_file:
      - .env
    environment:
      - FLASK_APP=app
    depends_on:
      - redis
  flower:
    build:
      context: .
      dockerfile: ./dockerServices/Dockerfile
    # image: flask_celery_example_celery_flower
    command: /start-flower
    volumes:
      - ./dockerServices/:/app
    env_file:
      - .env
    ports:
      - 5557:5555
    depends_on:
      - redis
      # - db
      # - db
      #  https://medium.com/@wilde.consult/fastapi-celery-flower-docker-async-example-part6-3317181c9445

      #  https://testdriven.io/courses/flask-celery/docker/
      # postgisdb:
      #   build: postgisdbWpgvector/
      #   volumes:
      #     - postgis-data-volume:/var/lib/postgresql/data
      #   environment:
      #     # If you need to create multiple database you can add coma separated databases eg gis,data
      #     - POSTGRES_DB=dsagis
      #     - POSTGRES_USER=docker
      #     - POSTGRES_PASS=docker
      #     - ALLOW_IP_RANGE=0.0.0.0/0
      #     - POSTGRES_HOST_AUTH_METHOD=trust ## Not necessarily the best idea longterm..
      #     #- DATADIR=/opt/postgres/data
      #     # Add extensions you need to be enabled by default in the DB. Default are the five specified below
      #     - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting,pgvector
      #   ports:
      #     - 5432:5432
      #   restart: on-failure
      #   healthcheck:
      #     test: "exit 0"
      # datascience-notebook:
      #   container_name: dsapostgisnb
      #   build: dsapostgisnb/
      #   volumes:
      #     - ./dsapostgisnb/geonotebooks:/app
      #     - ./fastapi/app:/app/fastapifiles
      #   ports:
      #     - 8888:8888
      #   expose:
      #     - "8888"
      #   depends_on:
      #     - postgisdb
      # pgadmin4:
      #   image: dpage/pgadmin4
      #   container_name: pgadmin4
      #   ports:
      #     - '5050:80'
      #   environment:
      #     PGADMIN_DEFAULT_EMAIL: dsagis@dsagis.io
      #     PGADMIN_DEFAULT_PASSWORD: dsagis
      #   links:
      #     - postgisdb
      #   depends_on:
      #     - postgisdb
      # fastapi:
      #   container_name: dsapostgisapi
      #   build: fastapi/
      #   command: bash -c 'while !</dev/tcp/postgisdb/5432; do sleep 1; done; uvicorn app.main:app --host 0.0.0.0 --port 82 --reload'
      #   ports:
      #     - "82:82"
      #   expose:
      #     - "82"
      #   depends_on:
      #     - postgisdb
      #   volumes:
      #     - ${PWD}/fastapi/app:/code/app
      # osdgisviewer:
      #   build: osdGisViewer/
      #   expose:
      #     - "3000"
      #     - "35729" # For livereload
      #   container_name: osdgisviewer
      #   ports:
      #     - "3000:3000"
      #     - "35729:35729"
      #   volumes:
      #     - ${PWD}/osdGisViewer:/app
      #https://gitlab.com/abtawfik/docker-celery-dash-redis-template


      # image: flask_celery_example_web
      #   # '/start' is the shell script used to run the service
      #   command: /start
      #   # this volume is used to map the files and folders on the host to the container
      #   # so if we change code on the host, code in the docker container will also be changed
      #   volumes:
      #     - .:/app
      #   ports:
      #     - 5010:5000
      #   env_file:
      #     - .env/.dev-sample
      #   environment:
      #     - FLASK_APP=app
      #   depends_on:
      #     - redis
      #     - db
